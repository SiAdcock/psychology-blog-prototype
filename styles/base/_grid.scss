@import "../../node_modules/susy/sass/susy";

$columns: $TOTAL_COLUMNS;
$small-device-max-width: $SMALL_DEVICE_MAX_WIDTH;
$large-device-min-width: $SMALL_DEVICE_MAX_WIDTH + 1;
$large-device-max-width: $LARGE_DEVICE_MAX_WIDTH;
$small: $DEVICE_SMALL;
$large: $DEVICE_LARGE;

$susy: (
  flow: ltr,
  math: fluid,
  output: float,
  gutter-position: after,
  container: auto,
  container-position: center,
  columns: $columns,
  gutters: .25,
  column-width: false,
  global-box-sizing: content-box,
  last-flow: to,
  debug: (
    image: hide,
    color: rgba(#66f, .25),
    output: background,
    toggle: top right
  ),
  use-custom: (
    background-image: true,
    background-options: false,
    box-sizing: true,
    clearfix: false,
    rem: true
  )
);

// Include in any class that represents a container
@mixin grid-container {
  @include container;
}

// Include in any class that represents a row
@mixin grid-row {
  margin: 0;
}

// Include in any class that represents a column
@mixin grid-column($width) {
  @include span($width);
}

// A grid column that may contain child grid columns
@mixin grid-column-parent($width) {
  @include span($width nest);
}

@mixin grid-column-child($width, $context) {
  @include span($width of $context);
}

// Alpha column
@mixin grid-column-first($width) {
  @include span(first $width);
}

// Omega column
@mixin grid-column-last($width) {
  @include span(last $width);
}

// Include in any class that should be cleared
@mixin clearfix($type:after) {
  @if($type == after) {
    @include susy-clearfix;
  }
  @if($type == overflow) {
    overflow: hidden;
  }
}

@mixin breakpoint($point) {
  @if $point == $small {
    @media (max-width: $small-device-max-width) { @content; }
  }
  @else if $point == $large {
    @media (min-width: $large-device-min-width) and (max-width: $large-device-max-width) { @content; }
  }
}

@mixin margin-before-after($margin) {
  @include squish($margin);
}